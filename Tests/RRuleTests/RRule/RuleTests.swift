//
//  RuleTests.swift
//  
//
//  Created by Yuri Sidorov on 07.03.2024.
//

import XCTest
@testable import RRule

final class RuleTests: XCTestCase {
    var rrule: Rule!
    let tzid = "America/New_York"
    var dtstart: Date!
    var floorDate: Date!
    
    override func setUp() {
        super.setUp()
        // Setup dtstart
        let dtstartComponents = DateComponents(calendar: .current, timeZone: TimeZone(identifier: "PDT"), year: 1997, month: 9, day: 2, hour: 6)
        dtstart = Calendar.current.date(from: dtstartComponents)
        
        // Setup floorDate
        let floorDateComponents = DateComponents(calendar: .current, timeZone: TimeZone(identifier: "PDT"), year: 2018, month: 9, day: 3, hour: 6)
        floorDate = Calendar.current.date(from: floorDateComponents)
        
        // Initialize rrule
        rrule = Rule(rrule: "FREQ=DAILY", dtstart: dtstart, tzid: tzid, exdate: [])
    }
    
    
    func testRuleIteration() {
        let rule = Rule(rrule: "FREQ=DAILY", dtstart: Date(), tzid: "UTC")
        let floorDate = Date() // Assume this is the date from which you want to start iterating
        
        // Create an iterator from the specified floor date
        var iterator = rule.makeIterator(from: floorDate)
        
        // Example of iterating through the dates
        var dates: [Date] = []
        while let nextDate = iterator.next() {
            dates.append(nextDate)
            if dates.count == 3 { break } // For example, if you only want to iterate through 3 dates
        }
        
        // Now 'dates' contains up to 3 dates generated by the rule starting from 'floorDate'
    }
    
    func testIteratingWithAFloorDateNoCountOrIntervalGreaterThanOne() {
        let expectedDates: [Date] = [
            Calendar.current.date(from: DateComponents(calendar: .current, timeZone: TimeZone(identifier: "PDT"), year: 2018, month: 9, day: 3, hour: 6))!,
            Calendar.current.date(from: DateComponents(calendar: .current, timeZone: TimeZone(identifier: "PDT"), year: 2018, month: 9, day: 4, hour: 6))!,
            Calendar.current.date(from: DateComponents(calendar: .current, timeZone: TimeZone(identifier: "PDT"), year: 2018, month: 9, day: 5, hour: 6))!
        ]
        
        // Simulate iterating with floorDate and collecting the results
        var results = [Date]()
        var generator = rrule.makeIterator(from: floorDate)
        for _ in 0..<3 {
            if let nextDate = generator.next() {
                results.append(nextDate)
            }
        }
        
        XCTAssertEqual(results, expectedDates)
    }
}
